<?php
function bolsas_entity_info(){
 $bolsas_info['bolsas'] = array(
   'label' => t('Bolsas'),
   'controller class' => 'BolsasController',
   'base table' => 'bolsas',
   'uri callback' => 'bolsas_uri',
   'fieldable' => TRUE,
   'entity keys' => array(
     'id' => 'pid',
   ),
   'static cache' => TRUE,
   'bundles' => array(
     'bolsas'=> array(
       'label' => 'Bolsas',
       'admin' => array(
         'path' => 'admin/structure/bolsas/manage',
         'access arguments' => array('administer bolsas'),
       ),
     ),
   ),
   'view modes' => array(
     'tweaky' => array(
       'label' => t('Bolsas'),
       'custom settings' =>  FALSE,
     ),
   )
 );

 return $bolsas_info;
}
function bolsas_delete($entity) {
 entity_get_controller('bolsas')->delete($entity);
}
class BolsasController extends DrupalDefaultEntityController{
 public function save($bolsas) {
  drupal_write_record('bolsas', $bolsas);
  field_attach_insert('bolsas', $bolsas);
  module_invoke_all('entity_insert', 'bolsas', $bolsas);
  return $bolsas;
 }
 public function create(){
  $bolsas = new stdClass();
  $bolsas->type = 'bolsas';
  $bolsas->pid = 0;
  $bolsas->pr = '';
  $bolsas->nome = '';
  $bolsas->valor = 0;
  $bolsas->vencimento = '';
    return $bolsas;
 }
 public function delete($entity) {
  $this->delete_multiple(array($entity));
 }
 
 public function delete_multiple($entities) {
  $pdis = array();
  if (!empty($entities)) {
   $transaction = db_transaction();
   try {
    foreach ($entities as $entity) {
     module_invoke_all('bolsas_delete', $entity);
     module_invoke_all('bolsas_delete', $entity, 'bolsas');
     field_attach_delete('bolsas', $entity);
     $basic_ids[] = $entity->pid;
    }
    db_delete('bolsas')
    ->condition('pid', $basic_ids, 'IN')
    ->execute();
 
   }
   catch (Exception $e) {
    $transaction->rollback();
    watchdog_exception('bolsas', $e);
    throw $e;
   }
  }
 }
}
function bolsas_uri($bolsas){
 return array(
   'path' => 'bolsas/' . $bolsas->pid,
 );
}
function bolsas_load($pid = NULL, $reset = FALSE){
 $pids = (isset ($pid) ? array($pid) : array());
 $bolsas = bolsas_load_multiple($pids, $reset);
 return $bolsas ? reset ($bolsas) : FALSE;
}

function bolsas_load_multiple($pids = FALSE, $conditions = array(), $reset = FALSE){
 return entity_load('bolsas', $pids, $conditions, $reset);
}

function bolsas_menu(){
 $items['bolsas'] = array(
   'title' => 'Bolsas',
   'page callback' => 'bolsas_info_page',
   'access callback' => TRUE,
 );
 $items['admin/structure/bolsas/manage'] = array(
   'title' => 'Bolsas admin',
   'description' => 'Manage bolsas structure',
   'page callback' => 'bolsas_info',
   'access arguments' => array('administer bolsas'),
 );
 $items['bolsas/%bolsas'] = array(
   'title callback' => 'bolsas_page_title',
   'title arguments' => array(3),
   'page callback' => 'bolsas_page_view',
   'page arguments' => array(3),
   'access arguments' => array('view bolsas'),
 );
 $items['bolsas/%bolsas/view'] = array(
   'title' => 'View',
   'type' => MENU_DEFAULT_LOCAL_TASK,
   'weight' => -10,
 );
  $items['bolsas/update'] = array(
    'title' => 'Update entry',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bolsas_form_update'),
	'access arguments' => array('administer bolsas'),
  );
 $items['bolsas/add'] = array(
   'title' => 'Cadastro de bolsas',
   'page callback' => 'bolsas_add',
   'access arguments' => array('create bolsa'),
 );
 return $items;
}


function bolsas_info_page() {
  $content[] = array(
    '#type' => 'item',
    '#markup' => t('Listagem de Modalidades de Bolsas',
      array('!link' => l(t('here'), 'admin/structure/bolsas/manage'))
    ),
  );
  $content['table'] = bolsas_list_entities();
  return $content;
}


function bolsas_list_entities() {
  $content = array();

  if (!user_access('view any bolsas entity')) {
    $content[] = array(
      '#type' => 'item',
      '#markup' => t('This user does not have permission to view bolsas entities.'),
    );
    return $content;
  }
  $entities = bolsas_load_multiple();
  if (!empty($entities)) {
    foreach ( $entities as $entity ) {
      $rows[] = array(
        'data' => array(
          'Código' => $entity->pid,
          'proR' => $entity->pr,
          'Modalidade' => l($entity->nome, 'bolsas/' . $entity->pid),
          'Valor' => $entity->valor,
          'Vencimento' => $entity->vencimento,
        ),
      );
    }
    $content['entity_table'] = array(
      '#theme' => 'table',
      '#rows' => $rows,
      '#header' => array(t('Código'), t('Pró-Reitoria'),t('Modalidade'),t('Valor'),t('Vencimento'))
    );
  }
  else {
    $content[] = array(
      '#type' => 'item',
      '#markup' => t('No bolsas entities currently exist.'),
    );
  }
  return $content;
}


function bolsas_permission(){
 return array(
   'administer bolsas' =>  array(
     'title' => t('Administer bolsas'),
     'restrict access' => TRUE,
   ),
   'view bolsas' => array(
     'title' => t('View bolsas'),
   )
 );
}


function bolsas_info() {
 return ('Welcome to the administration page for your Postits!');
}

function bolsas_page_title($bolsas){
 return $bolsas->pid;
}

function bolsas_page_view($bolsas, $view_mode = 'tweaky'){
 
 $bolsas->content = array('#view_mode' => $view_mode,);
 field_attach_prepare_view('bolsas', array($bolsas->pid => $bolsas), $view_mode);
 entity_prepare_view('bolsas', array($bolsas->pid => $bolsas));
 $bolsas->content += field_attach_view('bolsas', $bolsas, $view_mode);
  $bolsas->content['nome'] = array(
   '#type' => 'item',
   '#title' => t('Nome'),
   '#markup' => $bolsas->nome,
 );
 $bolsas->content['pr'] = array(
   '#type' => 'item',
   '#title' => t('Pró-Reitoria'),
   '#markup' => $bolsas->pr,
 );
 $bolsas->content['valor'] = array(
   '#type' => 'item',
   '#title' => t('Valor'),
   '#markup' => $bolsas->valor,
 );
 $bolsas->content['vencimento'] = array(
   '#type' => 'item',
   '#title' => t('Vencimento'),
   '#markup' => $bolsas->venccimento,
 );
 global $language ;
 $langcode = $language->language ;
 module_invoke_all('entity_view', $bolsas, 'bolsas', $view_mode, $langcode);
 drupal_alter(array('bolsas_add_form', 'entity_view'), $bolsas->content);
 return $bolsas->content;
}

function bolsas_add() {
 $bolsas = entity_get_controller('bolsas')->create();
 return drupal_get_form('bolsas_form', $bolsas);
}
function bolsas_form($form, &$form_state, $bolsas) {
 print_r($bolsas);
 $form['bolsas'] = array(
   '#type' => 'value',
   '#value' => $bolsas,
 );
 $form['pr'] = array(
   '#type' => 'select',
   '#title' => t('Pró-Reitoria'),
   '#options' => array(
     'PROGEST' => t('PROGEST'),
     'PROAD' => t('PROAD'),
     'PRAE' => t('PRAE'),
     'PREG' => t('PREG'),
     'PROPLAN' => t('PROPLAN'),
     'PRPPG' => t('PRPPG'),
   ),
   '#default_value' =>'PROAD',
   '#required' => TRUE,
 );
 
 $form['nome'] = array(
   '#type' => 'textfield',
   '#title' => t('Nome'),
   '#required' => TRUE,
 ); 
 $form['valor'] = array(
   '#type' => 'textfield',
   '#title' => t('Valor'),
   '#required' => TRUE,
   '#size' => 10,
 );
 $form['vencimento'] = array(
   '#type' => 'select',
   '#title' => t('Vencimento Bolsa'),
   '#options' => array(
     '1' => t('1'),
	 '2' => t('2'),
	 '3' => t('3'),
	 '4' => t('4'),
	 '5' => t('5'),
	 '6' => t('6'),
	 '7' => t('7'),
	 '8' => t('8'),
	 '9' => t('9'),
	 '10' => t('10'),
	 '11' => t('11'),
	 '12' => t('12'),
   ),
   '#default_value' =>'12',
   '#required' => TRUE,
 );
 field_attach_form('bolsas', $bolsas, $form, $form_state);

 $form['submit'] = array(
   '#type' => 'submit',
   '#value' => t('Cadastrar'),
 );
 return $form;
}
function bolsas_form_validate($form, &$form_state) {
 $bolsas_submisttion = $form_state['values']['bolsas'];
 field_attach_form_validate('bolsas', $bolsas_submisttion, $form, $form_state);
}

function bolsas_form_submit($form, &$form_state) {
 $bolsas = $form_state['values']['bolsas']; 
 $bolsas->vencimento = $form_state['values']['vencimento'];
 $bolsas->nome = $form_state['values']['nome'];
 $bolsas->valor = $form_state['values']['valor'];
 $bolsas->pr = $form_state['values']['pr'];
 field_attach_submit('bolsas', $bolsas, $form, $form_state);
 $bolsas = bolsas_save($bolsas);
 $form_state['redirect'] = "bolsas/".$bolsas->pid;
}
function bolsas_save(&$bolsas) {
 return entity_get_controller('bolsas')->save($bolsas);
}





function bolsas_entry_load($entry = array()) {

  $select = db_select('bolsas', 'bolsa');
  $select->fields('bolsa');

  // Add each field and value as a condition to this query.
  foreach ($entry as $field => $value) {
    $select->condition($field, $value);
  }
  // Return the result in object format.
  return $select->execute()->fetchAll();
}

function bolsas_form_update($form, &$form_state) {
  $form = array(
    '#prefix' => '<div id="updateform">',
    '#suffix' => '</div>',
  );

  $entries = bolsas_entry_load();
  $keyed_entries = array();
  if (empty($entries)) {
    $form['no_values'] = array(
      '#value' => t("No entries exist in the table dbtng_example table."),
    );
    return $form;
  }

  foreach ($entries as $entry) {
    $options[$entry->pid] = t("@pid: @nome @vencimento @valor @pr", array('@pid' => $entry->pid, '@nome' => $entry->nome, '@vencimento' => $entry->vencimento, '@valor' => $entry->valor, '@pr' => $entry->pr));
    $keyed_entries[$entry->pid] = $entry;
  }
  $default_entry = !empty($form_state['values']['pid']) ? $keyed_entries[$form_state['values']['pid']] : $entries[0];

  $form_state['entries'] = $keyed_entries;

  $form['pid'] = array(
    '#type' => 'select',
    '#options' => $options,
    '#title' => t('Choose entry to update'),
    '#default_value' => $default_entry->pid,
    '#ajax' => array(
      'wrapper' => 'updateform',
      'callback' => 'bolsas_form_update_callback',
    ),
  );

  $form['nome'] = array(
    '#type' => 'textfield',
    '#title' => t('Updated first name'),
    '#size' => 15,
    '#default_value' => $default_entry->nome,
  );
  $form['valor'] = array(
   '#type' => 'textfield',
   '#title' => t('Valor'),
   '#required' => TRUE,
   '#size' => 10,
   '#default_value' => $default_entry->valor,
  );
  $form['vencimento'] = array(
   '#type' => 'select',
   '#title' => t('Vencimento Bolsa'),
   '#options' => array(
     '1' => t('1'),
	 '2' => t('2'),
	 '3' => t('3'),
	 '4' => t('4'),
	 '5' => t('5'),
	 '6' => t('6'),
	 '7' => t('7'),
	 '8' => t('8'),
	 '9' => t('9'),
	 '10' => t('10'),
	 '11' => t('11'),
	 '12' => t('12'),
   ),
   '#default_value' =>$default_entry->vencimento,
   '#required' => TRUE,
 );
 $form['pr'] = array(
   '#type' => 'select',
   '#title' => t('Pró-Reitoria'),
   '#options' => array(
     'PROGEST' => t('PROGEST'),
     'PROAD' => t('PROAD'),
     'PRAE' => t('PRAE'),
     'PREG' => t('PREG'),
     'PROPLAN' => t('PROPLAN'),
     'PRPPG' => t('PRPPG'),
   ),
   '#default_value' =>$default_entry->pr,
   '#required' => TRUE,
 );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update'),
  );
  return $form;
}

function bolsas_form_update_callback($form, $form_state) {
  $entry = $form_state['entries'][$form_state['values']['pid']];

  foreach (array('nome,vencimento,valor,pr') as $item) {
    $form[$item]['#value'] = $entry->$item;
  }
  return $form;
}

function bolsas_entry_update($entry) {
  try {
    // db_update()...->execute() returns the number of rows updated.
    $count = db_update('bolsas')
              ->fields($entry)
              ->condition('pid', $entry['pid'])
              ->execute();
  }
  catch (Exception $e) {
    drupal_set_message(t('db_update failed. Message = %message, query= %query',
      array('%message' => $e->getMessage(), '%query' => $e->query_string)), 'error');
  }
  return $count;
}

function bolsas_form_update_submit($form, &$form_state) {

  // Save the submitted entry.
  $entry = array(
    'pid' => $form_state['values']['pid'],
    'nome' => $form_state['values']['nome'],
    'vencimento' => $form_state['values']['vencimento'],
    'valor' => $form_state['values']['valor'],
    'pr' => $form_state['values']['pr'],
  );
  $count = bolsas_entry_update($entry);
  drupal_set_message(t("Updated entry @entry (@count row updated)", array('@count' => $count, '@entry' => print_r($entry, TRUE))));
}